#!/usr/bin/env node

/*!
 * bmocha - minimal mocha implementation
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bmocha
 */

/* eslint no-control-regex: "off" */

'use strict';

const assert = require('assert');
const fs = require('fs');
const path = require('path');
const bmocha = require('../lib/bmocha');

const {
  Mocha,
  SpecReporter,
  JSONReporter,
  JSONStreamReporter
} = bmocha;

const {
  basename,
  extname,
  join,
  resolve
} = path;

const {
  Array,
  Error,
  process,
  RegExp,
  Set
} = global;

const cwd = process.cwd();
const {argv, env, stdout, stderr, exit} = process;

/*
 * Constants
 */

const VERSION = '0.1.4';

const HELP = `
  Usage: bmocha [options] [files]

  Options:

    -V, --version           output the version number
    -c, --colors            force enabling of colors
    -C, --no-colors         force disabling of colors
    -O, --reporter-options  reporter-specific options
    -R, --reporter <name>   specify the reporter to use (default: spec)
    -S, --sort              sort test files
    -b, --bail              bail after first test failure
    -g, --grep <pattern>    only run tests matching <pattern>
    -f, --fgrep <string>    only run tests containing <string>
    -i, --invert            inverts --grep and --fgrep matches
    -r, --require <name>    require the given module
    -s, --slow <ms>         "slow" test threshold in milliseconds [75]
    -t, --timeout <ms>      set test-case timeout in milliseconds [2000]
    --exit                  force shutdown of the event loop after test run
    --no-timeouts           disables timeouts
    --recursive             include sub directories
    --reporters             display available reporters
    --retries <times>       set numbers of time to retry a failed test case
    --file <file>           include a file to be ran during the suite
    --exclude <file>        a file to ignore
    -l, --listen            serve client-side test files (requires browserify)
    -p, --port <port>       port to listen on [8080]
    -o, --open              open browser after serving
    -H, --headless          run tests in headless chrome
    -m, --cmd <cmd>         set browser command
    -z, --console           use console in browser
    -h, --help              output usage information
`;

const REPORTERS = `
    spec - hierarchical spec list
    json - single json object
    json-stream - newline delimited json events
`;

/*
 * Helpers
 */

function wrap(file) {
  assert(typeof file === 'string');

  return () => {
    const path = resolve(cwd, file);

    delete require.cache[path];

    require(path);
  };
}

function readdir(path) {
  assert(typeof path === 'string');
  return fs.readdirSync(path).map((name) => {
    return join(path, name);
  });
}

function exists(file) {
  assert(typeof file === 'string');
  try {
    fs.statSync(file);
    return true;
  } catch (e) {
    if (e.code !== 'ENOENT')
      throw e;
    return false;
  }
}

function flatten(files, recurse = false) {
  assert(Array.isArray(files));
  assert(typeof recurse === 'boolean');

  for (const file of files)
    assert(typeof file === 'string');

  const limit = recurse ? (-1 >>> 0) : 1;

  return walk(files, limit, []);
}

function walk(files, limit, out) {
  for (const file of files) {
    const stat = fs.statSync(file);

    if (stat.isDirectory()) {
      if (limit > 0)
        walk(readdir(file), limit - 1, out);
      continue;
    }

    const isJS = extname(file) === '.js';

    if (stat.isFile() && isJS) {
      out.push(file);
      continue;
    }
  }

  return out;
}

function exclude(files, excludes) {
  assert(Array.isArray(files));
  assert(excludes instanceof Set);

  return files.filter((file) => {
    const name = basename(file);
    return !excludes.has(name);
  });
}

function spawn(file, args, shell = false) {
  const cp = require('child_process');

  const ps = cp.spawn(file, args, {
    cwd,
    env,
    detached: true,
    stdio: 'ignore',
    shell
  });

  ps.unref();

  return ps;
}

function navigate(url, cmd) {
  assert(typeof url === 'string');
  assert(cmd == null || typeof cmd === 'string');

  // Any OS:
  if (cmd) {
    if (cmd.indexOf('%s') !== -1) {
      cmd = cmd.replace(/%s/g, url);
      return spawn(cmd, [], true);
    }

    return spawn(cmd, [url], true);
  }

  // Windows:
  // https://stackoverflow.com/questions/3739327
  if (process.platform === 'win32')
    return spawn('explorer', [url]);

  // OSX:
  // https://superuser.com/questions/85151
  if (process.platform === 'darwin')
    return spawn('open', [url]);

  // Unix:
  const name = env.BROWSER;

  if (!name)
    return spawn('xdg-open', [url]);

  if (/(?:chrome|chromium)/i.test(name))
    return spawn(name, [`--app=${url}`]);

  return spawn(name, [url]);
}

function findFile(files) {
  assert(Array.isArray(files));

  for (const file of files) {
    if (exists(file))
      return file;
  }

  return null;
}

function findChrome() {
  // See: https://github.com/karma-runner/karma-chrome-launcher
  if (process.platform === 'darwin') {
    return findFile([
      '/Applications/Chromium.app/Contents/MacOS/Chromium',
      '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
    ]);
  }

  if (process.platform === 'win32') {
    const bin = '\\Google\\Chrome\\Application\\chrome.exe';
    const files = [];

    for (const dir of [env.LOCALAPPDATA,
                       env.PROGRAMFILES,
                       env['PROGRAMFILES(X86)']]) {
      if (!dir || dir.length === 0)
        continue;

      files.push(join(dir, bin));
    }

    return findFile(files);
  }

  if (!env.PATH)
    return null;

  const files = [];

  for (const name of ['chromium',
                      'google-chrome',
                      'google-chrome-stable']) {
    for (const dir of env.PATH.split(':')) {
      if (dir.length === 0)
        continue;

      files.push(join(dir, name));
    }
  }

  return findFile(files);
}

function onExit(handler) {
  assert(typeof handler === 'function');

  const onSighup = () => exit(1 | 0x80);
  const onSigint = () => exit(2 | 0x80);
  const onSigterm = () => exit(15 | 0x80);

  const onError = (err) => {
    if (err && err.stack)
      err = err.stack;

    stderr.write(err + '\n');
    exit(1);
  };

  process.once('exit', handler);

  if (process.listenerCount('SIGHUP') === 0)
    process.once('SIGHUP', onSighup);

  if (process.listenerCount('SIGINT') === 0)
    process.once('SIGINT', onSigint);

  if (process.listenerCount('SIGTERM') === 0)
    process.once('SIGTERM', onSigterm);

  if (process.listenerCount('uncaughtException') === 0)
    process.once('uncaughtException', onError);

  if (process.listenerCount('unhandledRejection') === 0)
    process.once('unhandledRejection', onError);

  process.on('newListener', (name) => {
    switch (name) {
      case 'SIGHUP':
        process.removeListener(name, onSighup);
        break;
      case 'SIGINT':
        process.removeListener(name, onSigint);
        break;
      case 'SIGTERM':
        process.removeListener(name, onSigterm);
        break;
      case 'uncaughtException':
        process.removeListener(name, onError);
        break;
      case 'unhandledRejection':
        process.removeListener(name, onError);
        break;
    }
  });
}

function runHeadless(url, extra = []) {
  assert(typeof url === 'string');
  assert(Array.isArray(extra));

  const cp = require('child_process');

  const file = findChrome();

  if (!file)
    throw new Error('Could not find chrome binary.');

  const port = 1000 + Math.floor(Math.random() * (0x10000 - 1000));

  const args = [
    '--headless',
    '--disable-gpu',
    `--remote-debugging-port=${port}`,
    ...extra,
    url
  ];

  const ps = cp.spawn(file, args, {
    cwd,
    env,
    detached: false,
    stdio: 'ignore',
    shell: false
  });

  ps.unref();

  ps.on('error', (err) => {
    stderr.write('Child Process Error:\n');

    if (err && err.stack)
      err = err.stack;

    stderr.write(err + '\n');
    exit(1);
  });

  onExit(() => {
    ps.kill('SIGTERM');
  });

  return [[file, ...args], ps];
}

/*
 * Main
 */

process.env.BMOCHA = '1';
process.env.NODE_TEST = '1';

process.on('unhandledRejection', (err, promise) => {
  stderr.write('Unhandled rejection:\n');
  stderr.write('\n');

  if (err && err.stack)
    err = err.stack;

  stderr.write(err + '\n');
  exit(1);
});

process.on('multipleResolves', (type, promise, value) => {
  stderr.write(`Multiple ${type}s:\n`);
  stderr.write('\n');

  if (value && value.stack)
    value = value.stack;

  stderr.write(value + '\n');
  exit(1);
});

(async () => {
  const mocha = new Mocha(stdout);
  const options = Object.create(null);
  const excludes = new Set();
  const fileArgs = [];
  const requires = [];

  let Reporter = SpecReporter;
  let files = [];
  let sort = false;
  let doExit = false;
  let recurse = false;
  let listen = false;
  let open = false;
  let headless = false;
  let cmd = '';
  let useConsole = false;
  let port = -1;

  if (process.platform === 'win32')
    mocha.windows = true;

  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];

    let next = '';

    if (i + 1 < argv.length)
      next = argv[i + 1];

    switch (arg) {
      case '-V':
      case '--version': {
        stdout.write(VERSION + '\n');
        return 0;
      }

      case '-c':
      case '--colors': {
        mocha.colors = true;
        break;
      }

      case '-C':
      case '--no-colors': {
        mocha.colors = false;
        break;
      }

      case '-O':
      case '--reporter-options': {
        if (!next) {
          stderr.write(`Invalid option for: ${arg}.\n`);
          return 1;
        }

        for (const opt of next.split(',')) {
          const parts = opt.split('=');

          if (parts.length > 2 || parts.length === 0) {
            stderr.write(`Invalid reporter option ${opt}.\n`);
            return 1;
          }

          if (parts.length === 2)
            options[parts[0]] = parts[1];
          else
            options[parts[0]] = true;
        }

        i += 1;

        break;
      }

      case '-R':
      case '--reporter': {
        switch (next) {
          case 'spec':
            Reporter = SpecReporter;
            break;
          case 'json':
            Reporter = JSONReporter;
            break;
          case 'json-stream':
            Reporter = JSONStreamReporter;
            break;
          default:
            stderr.write(`Invalid reporter: '${next}'.\n`);
            return 1;
        }

        i += 1;

        break;
      }

      case '-S':
      case '--sort': {
        sort = true;
        break;
      }

      case '-b':
      case '--bail': {
        mocha.bail = true;
        break;
      }

      case '-g':
      case '--grep': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        mocha.grep = new RegExp(next);

        i += 1;

        break;
      }

      case '-f':
      case '--fgrep': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        mocha.fgrep = next;

        i += 1;

        break;
      }

      case '-i':
      case '--invert': {
        mocha.invert = true;
        break;
      }

      case '-r':
      case '--require': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        if (exists(next) || exists(`${next}.js`))
          next = resolve(cwd, next);

        requires.push(next);
        i += 1;

        break;
      }

      case '-s':
      case '--slow': {
        mocha.slow = next >>> 0;
        i += 1;
        break;
      }

      case '-t':
      case '--timeout': {
        mocha.timeout = next >>> 0;
        i += 1;
        break;
      }

      case '--no-timeouts': {
        mocha.timeouts = false;
        break;
      }

      case '--exit': {
        doExit = true;
        break;
      }

      case '--recursive': {
        recurse = true;
        break;
      }

      case '--reporters': {
        stdout.write(REPORTERS + '\n');
        return 0;
      }

      case '--retries': {
        mocha.retries = next >>> 0;
        i += 1;
        break;
      }

      case '--file': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        fileArgs.push(next);

        i += 1;

        break;
      }

      case '--exclude': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        next = basename(next);
        excludes.add(next);

        i += 1;

        break;
      }

      case '-h':
      case '--help': {
        stdout.write(HELP + '\n');
        return 0;
      }

      case '-l':
      case '--listen': {
        listen = true;
        break;
      }

      case '-p':
      case '--port': {
        port = next >>> 0;

        if (!next || port > 0xffff) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        listen = true;
        i += 1;

        break;
      }

      case '-o':
      case '--open': {
        listen = true;
        open = true;
        break;
      }

      case '-H':
      case '--headless': {
        listen = true;
        open = true;
        headless = true;
        break;
      }

      case '-m':
      case '--cmd': {
        if (!next) {
          stderr.write(`Invalid option for ${arg}.\n`);
          return 1;
        }

        listen = true;
        open = true;
        cmd = next;

        i += 1;

        break;
      }

      case '-z':
      case '--console': {
        useConsole = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-') {
          stderr.write(`Invalid argument: ${arg}.\n`);
          return 1;
        }

        files.push(arg);

        break;
      }
    }
  }

  mocha.report(Reporter, options);

  if (files.length === 0) {
    if (exists('test'))
      files.push('test');
    else if (exists('test.js'))
      files.push('test.js');
  }

  files = fileArgs.concat(files);
  files = files.map(file => resolve(cwd, file));
  files = flatten(files, recurse);
  files = exclude(files, excludes);

  if (sort)
    files.sort();

  if (listen) {
    const Server = require('../lib/server');

    if (port === -1)
      port = open ? 0 : 8080;

    const server = new Server(mocha, files, requires, {
      doExit,
      useConsole,
      headless
    });

    const addr = await server.listen(port, 'localhost');
    const url = `http://localhost:${addr.port}/`;

    server.on('error', (err) => {
      stderr.write('Server Error:\n');
      stderr.write('\n');

      if (err && err.stack)
        err = err.stack;

      stderr.write(err + '\n');
    });

    if (headless) {
      runHeadless(url);
      return -1;
    }

    stdout.write(`Server listening at: ${url}\n`);

    if (open)
      navigate(url, cmd);

    return -1;
  }

  module.paths.push(cwd, join(cwd, 'node_modules'));

  for (const file of requires)
    require(file);

  const funcs = files.map(file => wrap(file));
  const code = await mocha.run(funcs);

  if (doExit)
    exit(code);

  return code;
})().then((code) => {
  if (code !== -1)
    process.on('exit', () => exit(code));
}).catch((err) => {
  stderr.write('An error occurred outside of the test suite:\n');
  stderr.write('\n');

  if (err && err.stack)
    err = err.stack;

  stderr.write(err + '\n');
  exit(1);
});
