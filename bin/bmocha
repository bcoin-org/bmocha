#!/usr/bin/env node

/*!
 * bmocha - alternative mocha implementation
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bmocha
 */

'use strict';

const {join} = require('path');

/*
 * Options
 * https://github.com/nodejs/node/blob/v21.5.0/src/node_options.cc
 * Last update: c3abdc58aff762b8d8088ca9487c55c4ffe2fe50 (Dec 15, 2023)
 */

const nodeOptions = new Set([
  // Debug Options
  '--debug',
  '--debug-port',
  '--debug-brk',
  '--inspect',
  '--inspect-port',
  '--inspect-brk',
  '--inspect-brk-node',
  '--inspect-publish-uid',

  // Environment Options
  '--policy-integrity',
  '--allow-fs-read',
  '--allow-fs-write',
  '--allow-addons',
  '--allow-child-process',
  '--allow-worker',
  '--no-allow-addons',
  '--no-allow-child-process',
  '--no-allow-worker',
  '--no-addons',
  '--conditions',
  '--diagnostic-dir',
  '--dns-result-order',
  '--no-network-family-autoselection',
  '--enable-source-maps',
  '--experimental-json-modules',
  '--experimental-modules',
  '--experimental-wasm-modules',
  '--experimental-wasi-modules',
  '--experimental-wasi-unstable-preview1',
  '--experimental-wasm-bigint',
  '--experimental-policy',
  '--experimental-repl-await',
  '--experimental-vm-modules',
  '--experimental-worker',
  '--experimental-report',
  '--experimental-default-type',
  '--experimental-loader',
  '--experimental-global-webcrypto',
  '--experimental-import-meta-resolve',
  '--experimental-network-imports',
  '--experimental-permission',
  '--experimental-shadow-realm',
  '--experimental-test-coverage',
  '--experimental-websocket',
  '--experimental-fetch',
  '--experimental-global-customevent',
  '--experimental-abortcontroller',
  '--experimental-global-navigator',
  '--no-experimental-repl-await',
  '--no-experimental-global-webcrypto',
  '--no-experimental-fetch',
  '--no-experimental-global-customevent',
  '--no-experimental-global-navigator',
  '--expose-internals',
  '--frozen-intrinsics',
  '--heapsnapshot-signal',
  '--heapsnapshot-near-heap-limit',
  '--insecure-http-parser',
  '--http-parser',
  // '--input-type',
  '--loader',
  // '--entry-type',
  '--es-module-specifier-resolution',
  '--no-deprecation',
  '--no-force-async-hooks-checks',
  '--no-global-search-paths',
  '--no-warnings',
  '--disable-warning',
  '--force-context-aware',
  '--pending-deprecation',
  '--preserve-symlinks',
  '--preserve-symlinks-main',
  // '--prof-process',
  '--cpu-prof',
  '--cpu-prof-path',
  '--cpu-prof-name',
  '--cpu-prof-interval',
  '--cpu-prof-dir',
  '--heap-prof',
  '--heap-prof-name',
  '--heap-prof-dir',
  '--heap-prof-interval',
  '--redirect-warnings',
  '--throw-deprecation',
  '--trace-atomics-wait',
  '--trace-deprecation',
  '--trace-exit',
  '--trace-sync-io',
  '--trace-tls',
  '--trace-uncaught',
  '--trace-warnings',
  '--trace-promises',
  '--unhandled-rejections',
  '--no-extra-info-on-fatal-exception',
  // '-c', '--check',
  // '-e', '--eval',
  // '-p', '--print',
  // '-r', '--require',
  // '-i', '--interactive',
  '--napi-modules',
  '--tls-v1.0',
  '--tls-v1.1',
  '--tls-keylog',
  '--tls-min-v1.0',
  '--tls-min-v1.1',
  '--tls-min-v1.2',
  '--tls-min-v1.3',
  '--tls-max-v1.2',
  '--tls-max-v1.3',

  // Per Isolate Options
  '--track-heap-objects',
  '--abort-on-uncaught-exception',
  '--max-old-space-size',
  '--perf-basic-prof',
  '--perf-basic-prof-only-functions',
  '--perf-prof',
  '--perf-prof-unwinding-info',
  '--stack-trace-limit',
  '--disallow-code-generation-from-strings',
  '--jitless',
  '--diagnostic-report-uncaught-exception',
  '--diagnostic-report-on-signal',
  '--diagnostic-report-on-fatalerror',
  '--diagnostic-report-signal',
  '--diagnostic-report-filename',
  '--diagnostic-report-directory',
  '--diagnostic-report-verbose',
  '--report-uncaught-exception',
  '--report-on-signal',
  '--report-on-fatalerror',
  '--report-signal',
  '--report-filename',
  '--report-compact',
  '--report-dir',
  '--report-directory',

  // Per Process Options
  '--title',
  '--trace-event-categories',
  '--trace-event-file-pattern',
  '--trace-events-enabled',
  '--trace-event-categories',
  '--max-http-header-size',
  '--v8-pool-size',
  '--zero-fill-buffers',
  '--disable-proto',
  '--debug-arraybuffer-allocations',
  '--security-reverts',
  // '--completion-bash',
  // '-h', '--help',
  // '-v', '--version',
  // '--v8-options',
  '--icu-data-dir',
  '--openssl-config',
  '--tls-cipher-list',
  '--use-openssl-ca',
  '--use-bundled-ca',
  '--enable-fips',
  '--force-fips',
  '--secure-heap',
  '--secure-heap-min',
  '--use-largepages',
  '--trace-sigint',
  '--node-memory-debug'
]);

const valueOptions = new Set([
  // Debug Options (some have optional values)
  // '--debug',
  '--debug-port',
  // '--debug-brk',
  // '--inspect',
  '--inspect-port',
  // '--inspect-brk',
  // '--inspect-brk-node',
  '--inspect-publish-uid',

  // Environment Options
  '--policy-integrity',
  '--allow-fs-read',
  '--allow-fs-write',
  '--conditions',
  '--diagnostic-dir',
  '--dns-result-order',
  '--experimental-policy',
  '--experimental-default-type',
  '--experimental-loader',
  '--heapsnapshot-signal',
  '--heapsnapshot-near-heap-limit',
  '--http-parser',
  '--input-type',
  '--loader',
  '--entry-type',
  '--es-module-specifier-resolution',
  '--cpu-prof-path',
  '--cpu-prof-name',
  '--cpu-prof-interval',
  '--cpu-prof-dir',
  '--heap-prof-name',
  '--heap-prof-dir',
  '--heap-prof-interval',
  '--redirect-warnings',
  '--unhandled-rejections',
  '-e', '--eval',
  '-p', '--print',
  '-r', '--require',
  '--tls-keylog',

  // Per Isolate Options
  '--max-old-space-size',
  '--stack-trace-limit',
  '--diagnostic-report-signal',
  '--diagnostic-report-filename',
  '--diagnostic-report-directory',
  '--report-signal',
  '--report-filename',
  '--report-dir',
  '--report-directory',

  // Per Process Options
  '--title',
  '--trace-event-categories',
  '--trace-event-file-pattern',
  '--disable-proto',
  '--max-http-header-size',
  '--v8-pool-size',
  '--icu-data-dir',
  '--openssl-config',
  '--tls-cipher-list',
  '--use-largepages',
  '--secure-heap',
  '--secure-heap-min'
]);

function hasOption(options, arg, slice) {
  if (typeof arg !== 'string')
    return false;

  if (arg.length === 0)
    return false;

  if (arg[0] !== '-')
    return false;

  if (arg === '-' || arg === '--')
    return false;

  if (arg.startsWith('--')) {
    const index = arg.indexOf('=');

    if (index !== -1) {
      if (!slice)
        return false;

      arg = arg.substring(0, index);
    }
  }

  return options.has(arg);
}

function isNodeOption(arg) {
  return hasOption(nodeOptions, arg, true);
}

function isValueOption(arg) {
  return hasOption(valueOptions, arg, false);
}

function split(args) {
  const out = [];
  for (const arg of args.split(','))
    out.push(`--${arg}`);
  return out;
}

/*
 * Main
 */

function main() {
  const file = process.execPath || process.argv[0];
  const execArgv = (process.execArgv || []).slice();
  const execArgvLen = execArgv.length;
  const argv = [join(__dirname, '_bmocha')];

  let node = file;
  let ended = false;
  let valgrind = false;
  let vallog = false;

  for (let i = 2; i < process.argv.length; i++) {
    let arg = process.argv[i];

    // Allow `--` to terminate arguments.
    if (ended || arg === '--') {
      argv.push(arg);
      ended = true;
      continue;
    }

    // Primarily here to maintain
    // compatibility with mocha.
    switch (arg) {
      case 'debug':
        if (i === 2)
          arg = 'inspect';
        break;
      case '-d':
        arg = '--inspect';
        break;
      case '-gc':
        arg = '--v8-expose-gc';
        break;
      case '--expose-gc':
      case '--gc-global':
      case '--es_staging':
      case '--prof':
      case '--log-timer-events':
      case '--use_strict':
      case '--allow-natives-syntax':
        arg = `--v8-${arg.substring(2)}`;
        break;
      default:
        if (arg.startsWith('--harmony'))
          arg = `--v8-${arg.substring(2)}`;
        else if (arg.startsWith('--trace') && !isNodeOption(arg))
          arg = `--v8-${arg.substring(2)}`;
        else if (arg.startsWith('--debug'))
          arg = `--inspect${arg.substring(7)}`;
        break;
    }

    if (i === 2 && arg === 'inspect') {
      execArgv.unshift('inspect');
      argv.push('--no-timeouts');
      continue;
    }

    if (arg.startsWith('--node=') && arg.length > 7) {
      node = arg.substring(7);
      continue;
    }

    if (arg === '--node' && i + 1 < process.argv.length) {
      node = process.argv[++i];
      continue;
    }

    if (arg.startsWith('--node-option=') && arg.length > 14) {
      execArgv.push(...split(arg.substring(14)));
      continue;
    }

    if (i + 1 < process.argv.length) {
      if (arg === '-n' || arg === '--node-option') {
        execArgv.push(...split(process.argv[++i]));
        continue;
      }
    }

    if (arg === '--valgrind' || arg === '--valgrind-log') {
      valgrind = true;
      vallog = arg === '--valgrind-log';
      continue;
    }

    if (arg.startsWith('--inspect'))
      argv.push('--no-timeouts');

    if (arg === '--conditions') {
      argv.push(arg);

      if (i + 1 < process.argv.length)
        argv.push(process.argv[i + 1]);
    }

    if (arg.startsWith('--conditions='))
      argv.push(arg);

    if (isNodeOption(arg)) {
      execArgv.push(arg);

      if (isValueOption(arg) && i + 1 < process.argv.length)
        execArgv.push(process.argv[++i]);

      continue;
    }

    if (arg.startsWith('--v8-') && arg !== '--v8-options') {
      execArgv.push(`--${arg.substring(5)}`);
      continue;
    }

    argv.push(arg);
  }

  // All pointless if we didn't have any
  // node options. Use the same process
  // to speed things up.
  if (node === file && execArgv.length === execArgvLen && !valgrind) {
    require('./_bmocha');
    return;
  }

  const {spawn} = require('child_process');

  let args = execArgv.concat(argv);

  if (valgrind) {
    const vargs = [
      '--leak-check=full',
      '--show-leak-kinds=definite,indirect,possible'
    ];

    if (vallog)
      vargs.push('--log-file=valgrind-%p.log');

    args.push('--no-timeouts');
    args.push('-e');
    args.push('BMOCHA_VALGRIND=1');

    args = [...vargs, node, ...args];
    node = 'valgrind';
  }

  const ps = spawn(node, args, {
    stdio: 'inherit'
  });

  const onSighup = () => ps.kill('SIGHUP');
  const onSigint = () => ps.kill('SIGINT');
  const onSigterm = () => ps.kill('SIGTERM');

  process.on('SIGHUP', onSighup);
  process.on('SIGINT', onSigint);
  process.on('SIGTERM', onSigterm);

  ps.on('error', (err) => {
    if (err.code === 'ENOENT') {
      process.stderr.write(`File not found: ${JSON.stringify(err.path)}.\n`);
      process.exit(1);
    }

    process.stderr.write(`Child Process Error: ${err.message}\n`);
    process.exit(1);
  });

  ps.on('exit', (code, signal) => {
    process.removeListener('SIGHUP', onSighup);
    process.removeListener('SIGINT', onSigint);
    process.removeListener('SIGTERM', onSigterm);

    process.on('exit', () => {
      if (signal)
        process.kill(process.pid, signal);
      else
        process.exit(code);
    });
  });
}

/*
 * Execute
 */

main();
