#!/usr/bin/env node

/*!
 * bmocha - minimal mocha implementation
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bmocha
 */

/* eslint no-control-regex: "off" */

'use strict';

const assert = require('assert');
const fs = require('fs');
const os = require('os');
const path = require('path');
const {Mocha, inspect, toError} = require('../lib/bmocha');

const {
  basename,
  extname,
  join,
  resolve
} = path;

const {
  Array,
  Error,
  process,
  RegExp,
  Set
} = global;

const cwd = process.cwd();
const {argv, env, stdout, stderr, exit} = process;
const on = process.on.bind(process);
const off = process.removeListener.bind(process);

/*
 * Constants
 */

const VERSION = '0.1.5';

const HELP = `
  Usage: bmocha [options] [files]

  Options:

    -V, --version           output the version number
    -c, --colors            force enabling of colors
    -C, --no-colors         force disabling of colors
    -O, --reporter-options  reporter-specific options
    -R, --reporter <name>   specify the reporter to use (default: spec)
    -S, --sort              sort test files
    -b, --bail              bail after first test failure
    -g, --grep <pattern>    only run tests matching <pattern>
    -f, --fgrep <string>    only run tests containing <string>
    -i, --invert            inverts --grep and --fgrep matches
    -r, --require <name>    require the given module
    -s, --slow <ms>         "slow" test threshold in milliseconds [75]
    -t, --timeout <ms>      set test-case timeout in milliseconds [2000]
    -u, --ui <name>         specify user-interface (bdd) (default: bdd)
    --interfaces            display available interfaces
    --exit                  force shutdown of the event loop after test run
    --allow-uncaught        enable uncaught errors to propagate
    --no-timeouts           disables timeouts
    --recursive             include sub directories
    --reporters             display available reporters
    --retries <times>       set numbers of time to retry a failed test case
    --file <file>           include a file to be ran during the suite
    --exclude <file>        a file to ignore
    -l, --listen            serve client-side test files (requires browserify)
    -p, --port <port>       port to listen on [8080]
    -o, --open              open browser after serving
    -H, --headless          run tests in headless chrome
    -m, --cmd <cmd>         set browser command
    -z, --console           use console in browser
    -h, --help              output usage information
`;

const INTERFACES = `
    bdd
`;

const REPORTERS = `
    dot - dot matrix
    doc - html documentation
    spec - hierarchical spec list
    json - single json object
    progress - progress bar
    list - spec-style listing
    tap - test-anything-protocol
    landing - unicode landing strip
    xunit - xunit reporter
    min - minimal reporter (great with --watch)
    json-stream - newline delimited json events
    markdown - markdown documentation (github flavour)
    nyan - nyan cat!
`;

/*
 * Helpers
 */

function wrap(file) {
  assert(typeof file === 'string');

  return () => {
    const path = resolve(cwd, file);

    delete require.cache[path];

    require(path);
  };
}

function readdir(path) {
  assert(typeof path === 'string');
  return fs.readdirSync(path).map((name) => {
    return join(path, name);
  });
}

function exists(file) {
  assert(typeof file === 'string');
  try {
    fs.statSync(file);
    return true;
  } catch (e) {
    if (e.code !== 'ENOENT')
      throw e;
    return false;
  }
}

function flatten(files, recurse = false) {
  assert(Array.isArray(files));
  assert(typeof recurse === 'boolean');

  for (const file of files)
    assert(typeof file === 'string');

  const limit = recurse ? (-1 >>> 0) : 1;

  return walk(files, limit, []);
}

function walk(files, limit, out) {
  for (const file of files) {
    const stat = fs.statSync(file);

    if (stat.isDirectory()) {
      if (limit > 0)
        walk(readdir(file), limit - 1, out);
      continue;
    }

    const isJS = extname(file) === '.js';

    if (stat.isFile() && isJS) {
      out.push(file);
      continue;
    }
  }

  return out;
}

function exclude(files, excludes) {
  assert(Array.isArray(files));
  assert(excludes instanceof Set);

  return files.filter((file) => {
    const name = basename(file);
    return !excludes.has(name);
  });
}

function spawn(file, args, shell = false) {
  const cp = require('child_process');

  const ps = cp.spawn(file, args, {
    cwd,
    env,
    detached: true,
    stdio: 'ignore',
    shell
  });

  ps.on('error', () => {});

  ps.unref();

  return ps;
}

function navigate(url, cmd) {
  assert(typeof url === 'string');
  assert(cmd == null || typeof cmd === 'string');

  // Any OS:
  if (cmd) {
    if (cmd.indexOf('%s') !== -1) {
      cmd = cmd.replace(/%s/g, url);
      return spawn(cmd, [], true);
    }

    return spawn(cmd, [url], true);
  }

  // Windows:
  // https://stackoverflow.com/questions/3739327
  if (process.platform === 'win32')
    return spawn('explorer', [url]);

  // OSX:
  // https://superuser.com/questions/85151
  if (process.platform === 'darwin')
    return spawn('open', [url]);

  // Unix:
  const name = env.BROWSER;

  if (!name)
    return spawn('xdg-open', [url]);

  if (/(?:chrome|chromium)/i.test(name))
    return spawn(name, [`--app=${url}`]);

  return spawn(name, [url]);
}

function findFile(files) {
  assert(Array.isArray(files));

  for (const file of files) {
    if (exists(file))
      return file;
  }

  return null;
}

function findChrome() {
  // See: https://github.com/karma-runner/karma-chrome-launcher
  if (process.platform === 'darwin') {
    return findFile([
      '/Applications/Chromium.app/Contents/MacOS/Chromium',
      '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
    ]);
  }

  if (process.platform === 'win32') {
    const bin = '\\Google\\Chrome\\Application\\chrome.exe';
    const files = [];

    for (const dir of [env.LOCALAPPDATA,
                       env.PROGRAMFILES,
                       env['PROGRAMFILES(X86)']]) {
      if (!dir || dir.length === 0)
        continue;

      files.push(join(dir, bin));
    }

    return findFile(files);
  }

  if (!env.PATH)
    return null;

  const files = [];

  for (const name of ['chromium',
                      'google-chrome',
                      'google-chrome-stable']) {
    for (const dir of env.PATH.split(':')) {
      if (dir.length === 0)
        continue;

      files.push(join(dir, name));
    }
  }

  return findFile(files);
}

function onExit(handler) {
  assert(typeof handler === 'function');

  const onSighup = () => exit(1 | 0x80);
  const onSigint = () => exit(2 | 0x80);
  const onSigterm = () => exit(15 | 0x80);

  const onError = (err) => {
    if (err && err.stack)
      err = err.stack;

    stderr.write(err + '\n');
    exit(1);
  };

  process.once('exit', handler);

  if (process.listenerCount('SIGHUP') === 0)
    process.once('SIGHUP', onSighup);

  if (process.listenerCount('SIGINT') === 0)
    process.once('SIGINT', onSigint);

  if (process.listenerCount('SIGTERM') === 0)
    process.once('SIGTERM', onSigterm);

  if (process.listenerCount('uncaughtException') === 0)
    process.once('uncaughtException', onError);

  if (process.listenerCount('unhandledRejection') === 0)
    process.once('unhandledRejection', onError);

  process.on('newListener', (name) => {
    switch (name) {
      case 'SIGHUP':
        process.removeListener(name, onSighup);
        break;
      case 'SIGINT':
        process.removeListener(name, onSigint);
        break;
      case 'SIGTERM':
        process.removeListener(name, onSigterm);
        break;
      case 'uncaughtException':
        process.removeListener(name, onError);
        break;
      case 'unhandledRejection':
        process.removeListener(name, onError);
        break;
    }
  });
}

function runHeadless(url, extra = []) {
  assert(typeof url === 'string');
  assert(Array.isArray(extra));

  const cp = require('child_process');

  const file = findChrome();

  if (!file)
    throw new Error('Could not find chrome binary.');

  const port = 1000 + Math.floor(Math.random() * (0x10000 - 1000));

  const args = [
    '--headless',
    '--disable-gpu',
    `--remote-debugging-port=${port}`,
    ...extra,
    url
  ];

  const ps = cp.spawn(file, args, {
    cwd,
    env,
    detached: false,
    stdio: 'ignore',
    shell: false
  });

  ps.unref();

  ps.on('error', (err) => {
    stderr.write('Child Process Error:\n');

    if (err && err.stack)
      err = err.stack;

    stderr.write(err + '\n');
    exit(1);
  });

  onExit(() => {
    ps.kill('SIGTERM');
  });

  return [[file, ...args], ps];
}

function parseArgs() {
  const options = {
    __proto__: null,
    slow: 75,
    timeout: 2000,
    timeouts: true,
    retries: 0,
    stream: stdout,
    reporter: env.BMOCHA_REPORTER || 'spec',
    reporterOptions: Object.create(null),
    global: true,
    windows: process.platform === 'win32',
    colors: Boolean(stdout.isTTY),
    bail: false,
    grep: null,
    fgrep: '',
    invert: false,
    requires: [],
    files: [],
    exit: false,
    uncaught: false,
    listen: false,
    open: false,
    headless: false,
    cmd: '',
    console: false,
    port: -1
  };

  const excludes = new Set();
  const fileArgs = [];
  const reporterOptions = options.reporterOptions;

  let files = options.files;
  let recurse = false;
  let sort = false;

  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];

    let next = '';

    if (i + 1 < argv.length)
      next = argv[i + 1];

    switch (arg) {
      case '-V':
      case '--version': {
        stdout.write(VERSION + '\n');
        exit(0);
        break;
      }

      case '-c':
      case '--colors': {
        options.colors = true;
        break;
      }

      case '-C':
      case '--no-colors': {
        options.colors = false;
        break;
      }

      case '-O':
      case '--reporter-options': {
        if (!next)
          throw new Error(`Invalid option for: ${arg}.`);

        for (const opt of next.split(',')) {
          const parts = opt.split('=');

          if (parts.length > 2 || parts.length === 0)
            throw new Error(`Invalid reporter option ${opt}.`);

          if (parts.length === 2)
            reporterOptions[parts[0]] = parts[1];
          else
            reporterOptions[parts[0]] = true;
        }

        i += 1;

        break;
      }

      case '-R':
      case '--reporter': {
        if (!next)
          throw new Error(`Invalid option for: ${arg}.`);

        options.reporter = next;

        i += 1;

        break;
      }

      case '-S':
      case '--sort': {
        sort = true;
        break;
      }

      case '-b':
      case '--bail': {
        options.bail = true;
        break;
      }

      case '-g':
      case '--grep': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        options.grep = new RegExp(next);

        i += 1;

        break;
      }

      case '-f':
      case '--fgrep': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        options.fgrep = next;

        i += 1;

        break;
      }

      case '-i':
      case '--invert': {
        options.invert = true;
        break;
      }

      case '-r':
      case '--require': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        if (exists(next) || exists(`${next}.js`))
          next = resolve(cwd, next);

        options.requires.push(next);
        i += 1;

        break;
      }

      case '-s':
      case '--slow': {
        options.slow = next >>> 0;
        i += 1;
        break;
      }

      case '-t':
      case '--timeout': {
        options.timeout = next >>> 0;
        i += 1;
        break;
      }

      case '-u':
      case '--ui': {
        if (next !== 'bdd')
          throw new Error(`Invalid interface: ${next}.`);
        break;
      }

      case '--no-timeouts': {
        options.timeouts = false;
        break;
      }

      case '--interfaces': {
        stdout.write(INTERFACES + '\n');
        exit(0);
        break;
      }

      case '--exit': {
        options.exit = true;
        break;
      }

      case '--allow-uncaught': {
        options.uncaught = true;
        break;
      }

      case '--recursive': {
        recurse = true;
        break;
      }

      case '--reporters': {
        stdout.write(REPORTERS + '\n');
        exit(0);
        break;
      }

      case '--retries': {
        options.retries = next >>> 0;
        i += 1;
        break;
      }

      case '--file': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        fileArgs.push(next);

        i += 1;

        break;
      }

      case '--exclude': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        next = basename(next);
        excludes.add(next);

        i += 1;

        break;
      }

      case '-h':
      case '--help': {
        stdout.write(HELP + '\n');
        exit(0);
        break;
      }

      case '-l':
      case '--listen': {
        options.listen = true;
        break;
      }

      case '-p':
      case '--port': {
        options.port = next >>> 0;

        if (!next || options.port > 0xffff)
          throw new Error(`Invalid option for ${arg}.`);

        options.listen = true;
        i += 1;

        break;
      }

      case '-o':
      case '--open': {
        options.listen = true;
        options.open = true;
        break;
      }

      case '-H':
      case '--headless': {
        options.listen = true;
        options.open = true;
        options.headless = true;
        break;
      }

      case '-m':
      case '--cmd': {
        if (!next)
          throw new Error(`Invalid option for ${arg}.`);

        options.listen = true;
        options.open = true;
        options.cmd = next;

        i += 1;

        break;
      }

      case '-z':
      case '--console': {
        options.console = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-')
          throw new Error(`Invalid argument: ${arg}.`);

        options.files.push(arg);

        break;
      }
    }
  }

  if (options.listen) {
    if (options.port === -1)
      options.port = options.open ? 0 : 8080;
  }

  if (files.length === 0) {
    if (exists('test'))
      files.push('test');
    else if (exists('test.js'))
      files.push('test.js');
  }

  files = fileArgs.concat(files);
  files = files.map(file => resolve(cwd, file));
  files = flatten(files, recurse);
  files = exclude(files, excludes);

  if (sort)
    files.sort();

  options.files = files;

  if (typeof reporterOptions.output === 'string') {
    const output = reporterOptions.output.replace(/^~/, os.homedir());
    const stream = fs.createWriteStream(output);

    stream.on('error', (err) => {
      if (err && err.stack)
        err = err.stack;
      stderr.write(err + '\n');
      exit(1);
    });

    options.stream = stream;
    options.colors = false;
  }

  return options;
}

/*
 * Error Handling
 */

function catcher(reject) {
  const onError = (error) => {
    const err = toError(error, true);

    err.uncaught = true;
    err.exception = true;

    reject(err);
  };

  const onRejection = (reason, promise) => {
    const err = toError(reason, true);

    err.uncaught = true;
    err.rejected = true;

    reject(err);
  };

  const onMultiple = (type, promise, value) => {
    const kind = inspect.type(value);
    const data = inspect.single(value);
    const err = new Error(`Multiple ${type}s detected for ${kind}: ${data}.`);

    err.operator = 'deepStrictEqual';
    err.actual = value;
    err.expected = null;
    err.uncaught = true;
    err.multiple = true;

    reject(err);
  };

  on('uncaughtException', onError);
  on('unhandledRejection', onRejection);
  on('multipleResolves', onMultiple);

  return () => {
    off('uncaughtException', onError);
    off('unhandledRejection', onRejection);
    off('multipleResolves', onMultiple);
  };
}

/*
 * Bind
 */

env.BMOCHA = '1';
env.NODE_TEST = '1';

/*
 * Main
 */

(async () => {
  let options;

  try {
    options = parseArgs();
  } catch (e) {
    stderr.write(e.message + '\n');
    return 1;
  }

  if (options.listen) {
    const Server = require('../lib/server');
    const server = new Server(options);
    const addr = await server.listen(options.port, 'localhost');
    const url = `http://localhost:${addr.port}/`;

    server.on('error', (err) => {
      stderr.write('Server Error:\n');
      stderr.write('\n');

      if (err && err.stack)
        err = err.stack;

      stderr.write(err + '\n');
    });

    if (options.headless) {
      runHeadless(url);
      return -1;
    }

    stdout.write(`Server listening at: ${url}\n`);

    if (options.open)
      navigate(url, options.cmd);

    return -1;
  }

  const mocha = new Mocha(options);

  env.BMOCHA_REPORTER = options.reporter;

  if (!options.uncaught)
    mocha.catcher = catcher;

  mocha.exit = exit;

  module.paths.push(cwd, join(cwd, 'node_modules'));

  for (const file of options.requires)
    require(file);

  const funcs = options.files.map(file => wrap(file));
  const code = await mocha.run(funcs);

  if (options.stream !== stdout)
    options.stream.end();

  if (options.exit)
    exit(code);

  return code;
})().then((code) => {
  if (code !== -1) {
    process.exitCode = code;
    on('exit', () => exit(code));
  }
}).catch((err) => {
  stderr.write('An error occurred outside of the test suite:\n');
  stderr.write('\n');

  if (err && err.stack)
    err = err.stack;

  stderr.write(err + '\n');
  exit(1);
});
