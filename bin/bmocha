#!/usr/bin/env node

/*!
 * bmocha - minimal mocha implementation
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bmocha
 */

/* eslint no-control-regex: "off" */

'use strict';

const assert = require('assert');
const fs = require('fs');
const path = require('path');
const bmocha = require('../lib/bmocha');

const {
  Mocha,
  SpecReporter,
  JSONReporter
} = bmocha;

const {
  basename,
  extname,
  join,
  resolve
} = path;

const {
  Array,
  Error,
  process,
  RegExp,
  Set,
  String
} = global;

const cwd = process.cwd();
const {argv, stdout, stderr, exit} = process;

/*
 * Constants
 */

const VERSION = '0.1.2';

const HELP = `
  Usage: bmocha [options] [files]

  Options:

    -V, --version          output the version number
    -c, --colors           force enabling of colors
    -C, --no-colors        force disabling of colors
    -R, --reporter <name>  specify the reporter to use (default: spec)
    -S, --sort             sort test files
    -b, --bail             bail after first test failure
    -g, --grep <pattern>   only run tests matching <pattern>
    -f, --fgrep <string>   only run tests containing <string>
    -i, --invert           inverts --grep and --fgrep matches
    -r, --require <name>   require the given module
    -s, --slow <ms>        "slow" test threshold in milliseconds [75]
    -t, --timeout <ms>     set test-case timeout in milliseconds [2000]
    --exit                 force shutdown of the event loop after test run
    --no-timeouts          disables timeouts
    --recursive            include sub directories
    --retries <times>      set numbers of time to retry a failed test case
    --file <file>          include a file to be ran during the suite
    --exclude <file>       a file or glob pattern to ignore
    -h, --help             output usage information
`;

/*
 * Helpers
 */

function wrap(file) {
  assert(typeof file === 'string');

  return () => {
    const path = resolve(cwd, file);

    delete require.cache[path];

    try {
      require(path);
    } catch (e) {
      if (e.code === 'MODULE_NOT_FOUND')
        throw new Error(`Could not find ${file}.`);

      throw e;
    }
  };
}

function readdir(path) {
  assert(typeof path === 'string');
  return fs.readdirSync(path).map((name) => {
    return join(path, name);
  });
}

function exists(file) {
  assert(typeof file === 'string');
  try {
    fs.statSync(file);
    return true;
  } catch (e) {
    if (e.code !== 'ENOENT')
      throw e;
    return false;
  }
}

function flatten(files, recurse = false) {
  assert(Array.isArray(files));
  assert(typeof recurse === 'boolean');

  for (const file of files)
    assert(typeof file === 'string');

  const limit = recurse ? (-1 >>> 0) : 1;

  return walk(files, limit, []);
}

function walk(files, limit, out) {
  for (const file of files) {
    const stat = fs.statSync(file);

    if (stat.isDirectory()) {
      if (limit > 0)
        walk(readdir(file), limit - 1, out);
      continue;
    }

    const isJS = extname(file) === '.js';

    if (stat.isFile() && isJS) {
      out.push(file);
      continue;
    }
  }

  return out;
}

function exclude(files, excludes) {
  assert(Array.isArray(files));
  assert(excludes instanceof Set);

  return files.filter((file) => {
    const name = basename(file);
    return !excludes.has(name);
  });
}

/*
 * Main
 */

process.on('unhandledRejection', (err, promise) => {
  stderr.write('Unhandled rejection:\n');
  stderr.write('\n');
  if (err && err.stack)
    err = String(err.stack);
  stderr.write(err + '\n');
  exit(1);
});

(async () => {
  const mocha = new Mocha(stdout);
  const options = Object.create(null);
  const excludes = new Set();
  const fileArgs = [];
  const requires = [];

  let Reporter = SpecReporter;
  let files = [];
  let sort = false;
  let doExit = false;
  let recurse = false;

  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];

    let next = '';

    if (i + 1 < argv.length)
      next = argv[i + 1];

    switch (arg) {
      case '-V':
      case '--version':
        stdout.write(VERSION + '\n');
        return 0;
      case '-c':
      case '--colors':
        mocha.colors = true;
        break;
      case '-C':
      case '--no-colors':
        mocha.colors = false;
        break;
      case '-O':
      case '--reporter-options':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        for (const opt of next.split(',')) {
          const parts = opt.split('=');
          if (parts.length > 2 || parts.length === 0)
            throw new Error(`Invalid reporter option '${opt}'.`);
          else if (parts.length === 2)
            options[parts[0]] = parts[1];
          else
            options[parts[0]] = true;
        }
        i += 1;
        break;
      case '-R':
      case '--reporter':
        switch (next) {
          case 'spec':
            Reporter = SpecReporter;
            break;
          case 'json':
            Reporter = JSONReporter;
            break;
          default:
            stderr.write(`Invalid reporter: '${next}'.\n`);
            return 1;
        }
        i += 1;
        break;
      case '-S':
      case '--sort':
        sort = true;
        break;
      case '-b':
      case '--bail':
        mocha.bail = true;
        break;
      case '-g':
      case '--grep':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        mocha.grep = new RegExp(next);
        i += 1;
        break;
      case '-f':
      case '--fgrep':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        mocha.fgrep = next;
        i += 1;
        break;
      case '-i':
      case '--invert':
        mocha.invert = true;
        break;
      case '-r':
      case '--require':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        if (exists(next) || exists(`${next}.js`))
          next = resolve(cwd, next);
        requires.push(next);
        i += 1;
        break;
      case '-s':
      case '--slow':
        mocha.slow = next >>> 0;
        i += 1;
        break;
      case '-t':
      case '--timeout':
        mocha.timeout = next >>> 0;
        i += 1;
        break;
      case '--no-timeouts':
        mocha.timeouts = false;
        break;
      case '--exit':
        doExit = true;
        break;
      case '--recursive':
        recurse = true;
        break;
      case '--retries':
        mocha.retries = next >>> 0;
        i += 1;
        break;
      case '--file':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        fileArgs.push(next);
        i += 1;
        break;
      case '--exclude':
        if (!next) {
          stderr.write('Invalid argument.\n');
          return 1;
        }
        next = basename(next);
        excludes.add(next);
        i += 1;
        break;
      case '-h':
      case '--help':
        stdout.write(HELP + '\n');
        return 0;
      default:
        if (arg.length === 0 || arg[0] === '-') {
          stderr.write(`Invalid option: ${arg}.\n`);
          return 1;
        }
        files.push(arg);
        break;
    }
  }

  mocha.report(Reporter, options);

  if (files.length === 0) {
    if (exists('test'))
      files.push('test');
    else if (exists('test.js'))
      files.push('test.js');
  }

  files = fileArgs.concat(files);
  files = files.map(file => resolve(cwd, file));
  files = flatten(files, recurse);
  files = exclude(files, excludes);

  if (sort)
    files.sort();

  module.paths.push(cwd, join(cwd, 'node_modules'));

  for (const file of requires)
    require(file);

  const funcs = files.map(file => wrap(file));
  const code = await mocha.run(funcs);

  if (doExit)
    exit(code);

  return code;
})().then((code) => {
  process.on('exit', () => exit(code));
}).catch((err) => {
  stderr.write('An error occurred outside of the test suite:\n');
  stderr.write('\n');
  if (err && err.stack)
    err = String(err.stack);
  stderr.write(err + '\n');
  exit(1);
});
