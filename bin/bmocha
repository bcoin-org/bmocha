#!/usr/bin/env node

/*!
 * bmocha - minimal mocha implementation
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bmocha
 */

/* eslint no-control-regex: "off" */

'use strict';

const assert = require('assert');
const Path = require('path');

const {
  Array,
  Boolean,
  Date,
  clearTimeout,
  Error,
  Math,
  Number,
  process,
  Promise,
  RegExp,
  setTimeout,
  String
} = global;

const cwd = process.cwd();
const {argv, stdout, stderr, exit} = process;

/**
 * Mocha
 */

class Mocha {
  constructor(stream = stdout) {
    assert(stream && typeof stream.write === 'function');

    this.stream = stream;
    this.colors = Boolean(stream.isTTY);
    this.bail = false;
    this.grep = null;
    this.fgrep = null;
    this.invert = false;
    this.exit = false;
    this.depth = -1;
    this.timeout = 2000;
    this.beforeEaches = [];
    this.afterEaches = [];
    this.errors = [];
    this.passing = 0;
    this.failing = 0;
  }

  matches(name) {
    assert(typeof name === 'string');

    let ret = !this.invert;

    if (this.grep)
      ret = this.grep.test(name);
    else if (this.fgrep)
      ret = name.indexOf(this.fgrep) !== -1;

    if (this.invert)
      ret = !ret;

    return ret;
  }

  log(str, depth) {
    assert(typeof str === 'string');

    if (!this.colors)
      str = str.replace(/\x1b\[[^m]*?m/g, '');

    str = indent(str, depth);

    this.stream.write(str + '\n');
  }

  error(id, desc, name, err) {
    if (err == null || typeof err !== 'object')
      err = String(err);

    if (typeof err === 'string')
      err = new Error(err);

    assert((id >>> 0) === id);
    assert(typeof desc === 'string');
    assert(typeof name === 'string');
    assert(err && typeof err === 'object');

    const stack = formatStack(err.stack);

    if (desc) {
      this.log(`${id}) ${desc}`, 1);
      this.log(`${name}:`, 3);
    } else {
      this.log(`${id}) ${name}:`, 1);
    }

    this.log('');
    this.log(`\x1b[31m${err.name}: ${err.message}\x1b[m`, 3);

    if (err.code === 'ERR_ASSERTION') {
      this.log('\x1b[32m+ expected\x1b[m \x1b[31m- actual\x1b[m', 3);
      this.log('');
      this.log(`\x1b[31m-${err.actual}\x1b[m`, 3);
      this.log(`\x1b[32m+${err.expected}\x1b[m`, 3);
    }

    this.log('');
    this.log(`\x1b[90m${stack}\x1b[m`, 3);
    this.log('');
  }

  async run(funcs) {
    assert(Array.isArray(funcs));

    const start = Date.now();

    this.errors = [];
    this.passing = 0;
    this.failing = 0;

    for (const func of funcs) {
      const suite = Suite.from(this, func);

      if (!await suite.run())
        break;
    }

    const elapsed = Math.ceil((Date.now() - start) / 1000);
    const passed = `\x1b[32m${this.passing} passing\x1b[m`;
    const time = `\x1b[90m(${elapsed}s)\x1b[m`;

    this.log('');
    this.log(`${passed} ${time}`, 1);

    if (this.failing > 0)
      this.log(`\x1b[31m${this.failing} failing\x1b[m`, 1);

    this.log('');

    for (const [i, [desc, name, err]] of this.errors.entries())
      this.error(i + 1, desc, name, err);

    if (this.failing > 0)
      return this.failing;

    return this.exit ? 0 : -1;
  }
}

/**
 * Suite
 */

class Suite {
  constructor(mocha, parent, name, func) {
    assert(mocha instanceof Mocha);
    assert((parent instanceof Mocha)
        || (parent instanceof Suite));
    assert(typeof name === 'string');
    assert(typeof func === 'function');

    this.mocha = mocha;
    this.name = name;
    this.func = func;
    this.depth = parent.depth + 1;
    this.timeout = parent.timeout;
    this.befores = [];
    this.afters = [];
    this.beforeEaches = parent.beforeEaches.slice();
    this.afterEaches = parent.afterEaches.slice();
    this.tests = [];
    this.suites = [];

    this.api = {
      timeout: (ms) => {
        this.timeout = ms >>> 0;
      }
    };
  }

  log(str) {
    this.mocha.log(str, this.depth);
  }

  describe(name, func) {
    const {mocha} = this;
    const suite = new Suite(mocha, this, name, func);

    this.suites.push(suite);

    suite.init();
  }

  before(func) {
    assert(typeof func === 'function');
    this.befores.push(func);
  }

  after(func) {
    assert(typeof func === 'function');
    this.afters.push(func);
  }

  beforeEach(func) {
    assert(typeof func === 'function');
    this.beforeEaches.push(func);
  }

  afterEach(func) {
    assert(typeof func === 'function');
    this.afterEaches.push(func);
  }

  it(name, func) {
    assert(typeof name === 'string');
    assert(typeof func === 'function');

    if (this.mocha.matches(name))
      this.tests.push([name.substring(0, 300), func]);
  }

  init() {
    const describe = global.describe;
    const before = global.before;
    const after = global.after;
    const beforeEach = global.beforeEach;
    const afterEach = global.afterEach;
    const it = global.it;

    global.describe = this.describe.bind(this);
    global.before = this.before.bind(this);
    global.after = this.after.bind(this);
    global.beforeEach = this.beforeEach.bind(this);
    global.afterEach = this.afterEach.bind(this);
    global.it = this.it.bind(this);

    this.func.call(this.api);

    global.describe = describe;
    global.before = before;
    global.after = after;
    global.beforeEach = beforeEach;
    global.afterEach = afterEach;
    global.it = it;
  }

  succeed(name, start) {
    assert(typeof name === 'string');
    assert(Number.isSafeInteger(start));

    const elapsed = Date.now() - start;

    let suffix = '';

    if (elapsed >= 100)
      suffix = `\x1b[31m (${elapsed}ms)\x1b[m`;
    else if (elapsed >= 40)
      suffix = `\x1b[33m (${elapsed}ms)\x1b[m`;

    this.log(`  \x1b[32mâœ“\x1b[m \x1b[90m${name}\x1b[m${suffix}`);
    this.mocha.passing += 1;
  }

  fail(name, err) {
    assert(typeof name === 'string');

    const id = this.mocha.errors.length + 1;

    this.log(`  \x1b[31m${id}) ${name}\x1b[m `);
    this.mocha.errors.push([this.name, name, err]);
    this.mocha.failing += 1;

    return !this.mocha.bail;
  }

  async run() {
    if (this.tests.length === 0
        && this.suites.length === 0) {
      return true;
    }

    this.log('');

    if (this.name)
      this.log(`${this.name}`);

    for (const before of this.befores) {
      try {
        await this.runTest(before);
      } catch (e) {
        return this.fail('"before all" hook', e);
      }
    }

    for (const [name, func] of this.tests) {
      for (const before of this.beforeEaches) {
        try {
          await this.runTest(before);
        } catch (e) {
          return this.fail(`"before each" hook for "${name}"`, e);
        }
      }

      const start = Date.now();

      let err = null;

      try {
        await this.runTest(func);
      } catch (e) {
        err = e;
      }

      if (err) {
        if (!this.fail(name, err))
          return false;
      } else {
        this.succeed(name, start);
      }

      for (const after of this.afterEaches) {
        try {
          await this.runTest(after);
        } catch (e) {
          return this.fail(`"after each" hook for "${name}"`, e);
        }
      }
    }

    for (const suite of this.suites) {
      if (!await suite.run())
        return false;
    }

    for (const after of this.afters) {
      try {
        await this.runTest(after);
      } catch (e) {
        return this.fail('"after all" hook', e);
      }
    }

    return true;
  }

  async runTest(func) {
    assert(typeof func === 'function');

    return new Promise((resolve, reject) => {
      let timeout = this.timeout;
      let called = false;
      let timer = null;

      const ctx = {
        timeout: (ms) => {
          timeout = ms >>> 0;
        }
      };

      const cleanup = () => {
        if (timer != null) {
          clearTimeout(timer);
          timer = null;
        }
      };

      if (func.length > 0) {
        const cb = (err, result) => {
          if (called)
            return;

          called = true;
          cleanup();

          if (err) {
            reject(err);
            return;
          }

          resolve(result);
        };

        try {
          func.call(ctx, cb);
        } catch (e) {
          if (!called) {
            called = true;
            reject(e);
          }
          return;
        }
      } else {
        let promise;

        try {
          promise = func.call(ctx);
        } catch (e) {
          called = true;
          reject(e);
          return;
        }

        if (!(promise instanceof Promise)) {
          called = true;
          resolve(promise);
          return;
        }

        promise.then((result) => {
          cleanup();
          if (!called) {
            called = true;
            resolve(result);
          }
        }).catch((err) => {
          cleanup();
          if (!called) {
            called = true;
            reject(err);
          }
        });
      }

      if (timeout !== 0) {
        timer = setTimeout(() => {
          timer = null;
          if (!called) {
            called = true;
            reject(new Error(`Timeout of ${timeout}ms exceeded.`));
          }
        }, timeout);
      }
    });
  }

  static from(mocha, func) {
    const suite = new this(mocha, mocha, '', func);
    suite.init();
    return suite;
  }
}

/*
 * Helpers
 */

function indent(str, depth) {
  if (depth == null)
    depth = 0;

  assert(typeof str === 'string');
  assert((depth >>> 0) === depth);

  if (depth === 0)
    return str;

  let spaces = '';

  for (let i = 0; i < depth * 2; i++)
    spaces += ' ';

  return str.replace(/^/gm, spaces);
}

function formatStack(stack) {
  let str = String(stack);

  const index = str.indexOf('\n    at ');

  if (index !== -1)
    str = str.substring(index + 1);

  return str.replace(/^ +/gm, '');
}

function wrapRequire(file) {
  assert(typeof file === 'string');

  return () => {
    const path = Path.resolve(cwd, file);

    if (require.cache)
      delete require.cache[path];

    try {
      require(path);
    } catch (e) {
      if (e.code === 'MODULE_NOT_FOUND')
        throw new Error(`Could not find ${file}.`);

      throw e;
    }
  };
}

/*
 * Main
 */

process.on('unhandledRejection', (err, promise) => {
  stderr.write('Unhandled rejection:\n');
  stderr.write('\n');
  if (err && err.stack)
    err = String(err.stack);
  stderr.write(err + '\n');
  exit(1);
});

(async () => {
  const files = [];
  const excludes = new Set();
  const mocha = new Mocha();

  let sort = false;

  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];

    let next = '';

    if (i + 1 < argv.length)
      next = argv[i + 1];

    switch (arg) {
      case '-c':
      case '--colors':
        mocha.colors = true;
        break;
      case '-C':
      case '--no-colors':
        mocha.colors = false;
        break;
      case '-O':
      case '--reporter-options':
        i += 1;
        break;
      case '-R':
      case '--reporter':
        if (next !== 'spec') {
          stderr.write(`Invalid reporter: ${next}.\n`);
          exit(1);
        }
        i += 1;
        break;
      case '-S':
      case '--sort':
        sort = true;
        break;
      case '-b':
      case '--bail':
        mocha.bail = true;
        break;
      case '-g':
      case '--grep':
        mocha.grep = new RegExp(next);
        i += 1;
        break;
      case '-f':
      case '--fgrep':
        mocha.fgrep = next;
        i += 1;
        break;
      case '-i':
      case '--invert':
        mocha.invert = true;
        break;
      case '-r':
      case '--require':
        if (next[0] === '.')
          next = Path.resolve(cwd, next);
        require(next);
        i += 1;
        break;
      case '-s':
      case '--slow':
        i += 1;
        break;
      case '-t':
      case '--timeout':
        mocha.timeout = next >>> 0;
        i += 1;
        break;
      case '--no-timeouts':
        mocha.timeout = 0;
        break;
      case '--exit':
        mocha.exit = true;
        break;
      case '--file':
        files.unshift(next);
        i += 1;
        break;
      case '--exclude':
        excludes.add(Path.basename(next));
        i += 1;
        break;
      default:
        if (arg.length === 0 || arg[0] === '-') {
          stderr.write(`Invalid option: ${arg}.\n`);
          exit(1);
        }
        if (!excludes.has(Path.basename(arg)))
          files.push(arg);
        break;
    }
  }

  if (sort)
    files.sort();

  const funcs = files.map(file => wrapRequire(file));
  const code = await mocha.run(funcs);

  if (code !== -1)
    exit(code);
})().catch((err) => {
  stderr.write('An error occurred outside of the test suite:\n');
  stderr.write('\n');
  if (err && err.stack)
    err = String(err.stack);
  stderr.write(err + '\n');
  exit(1);
});
